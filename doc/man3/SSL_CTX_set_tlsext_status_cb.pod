=pod

=head1 NAME

SSL_CTX_set_tlsext_status_cb,
SSL_CTX_get_tlsext_status_cb,
SSL_CTX_set_tlsext_status_arg,
SSL_CTX_get_tlsext_status_arg,
SSL_CTX_set_tlsext_status_type,
SSL_CTX_get_tlsext_status_type,
SSL_set_tlsext_status_type,
SSL_get_tlsext_status_type,
SSL_get_tlsext_status_ocsp_resp,
SSL_set_tlsext_status_ocsp_resp,
SSL_get_tlsext_status_ocsp_multi_resp,
SSL_set_tlsext_status_ocsp_multi_resp,
SSL_OCSP_MULTI_RESP_new,
SSL_OCSP_MULTI_RESP_free,
SSL_OCSP_MULTI_RESP_num,
SSL_OCSP_MULTI_RESP_set,
SSL_OCSP_MULTI_RESP_get
- OCSP Certificate Status Request functions

=head1 SYNOPSIS

 #include <openssl/tls1.h>

 long SSL_CTX_set_tlsext_status_cb(SSL_CTX *ctx, int (*callback)(SSL *, void *));
 long SSL_CTX_get_tlsext_status_cb(SSL_CTX *ctx, int (**callback)(SSL *, void *));

 long SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg);
 long SSL_CTX_get_tlsext_status_arg(SSL_CTX *ctx, void **arg);

 long SSL_CTX_set_tlsext_status_type(SSL_CTX *ctx, int type);
 long SSL_CTX_get_tlsext_status_type(SSL_CTX *ctx);

 long SSL_set_tlsext_status_type(SSL *s, int type);
 long SSL_get_tlsext_status_type(SSL *s);

 long SSL_get_tlsext_status_ocsp_resp(ssl, unsigned char **resp);
 long SSL_set_tlsext_status_ocsp_resp(ssl, unsigned char *resp, int len);

 long SSL_get_tlsext_status_ocsp_multi_resp(ssl, SSL_OCSP_MULTI_RESP **resp);
 long SSL_set_tlsext_status_ocsp_multi_resp(ssl, SSL_OCSP_MULTI_RESP *resp);

 SSL_OCSP_MULTI_RESP *SSL_OCSP_MULTI_RESP_new(unsigned n_responses);
 int SSL_OCSP_MULTI_RESP_up_ref(SSL_OCSP_MULTI_RESP *resp);
 void SSL_OCSP_MULTI_RESP_free(SSL_OCSP_MULTI_RESP *resp);
 unsigned SSL_OCSP_MULTI_RESP_num(SSL_OCSP_MULTI_RESP *resp);
 int SSL_OCSP_MULTI_RESP_set(SSL_OCSP_MULTI_RESP *resp, unsigned n, unsigned char *data, size_t len, int copy);
 ossl_ssize_t SSL_OCSP_MULTI_RESP_get(SSL_OCSP_MULTI_RESP *resp, unsigned n, unsigned char **data);

=head1 DESCRIPTION

A client application may request that a server send back an OCSP status response
(also known as OCSP stapling). There are two TLS extensions defined:

=over

=item
I<status_request>: L<https://tools.ietf.org/html/rfc6066>

This will request the OCSP status for only the server certificate, excluding any
intermediate certificates in the chain.

=item
I<status_request_v2>: L<https://tools.ietf.org/html/rfc6961>

This will request the OCSP status for the complete server certificate chain,
i.e. the server certificate and all intermediate certificates.

=back

=head2 Client

To request the OCSP status, the client should call the 
SSL_CTX_set_tlsext_status_type() function prior to the creation of any SSL
objects. Alternatively an application can call the SSL_set_tlsext_status_type()
function on an individual SSL object prior to the start of the handshake.
Currently the supported types are B<TLSEXT_STATUSTYPE_ocsp> for I<status_req>
and B<TLSEXT_STATUSTYPE_ocsp_multi> for I<status_request_v2>.
Calling SSL_CTX_get_tlsext_status_type() will return the type
previously set via SSL_CTX_set_tlsext_status_type() or -1 if not set.

For interoperability with servers that only support I<status_request>, OpenSSL
will use both extensions if B<TLSEXT_STATUSTYPE_ocsp_multi> is set.

The client should additionally provide a callback function to decide what to do
with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The
callback function should determine whether the returned OCSP response is
acceptable or not. The callback will be passed as an argument the value
previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the
callback will not be called in the event of a handshake where session resumption
occurs (because there are no Certificates exchanged in such a handshake).
The callback previously set via SSL_CTX_set_tlsext_status_cb() can be retrieved
by calling SSL_CTX_get_tlsext_status_cb(), and the argument by calling
SSL_CTX_get_tlsext_status_arg().

On the client side SSL_get_tlsext_status_type() can be used to determine whether
the client has previously called SSL_set_tlsext_status_type(). It will return
the previously value if one has been set or -1 otherwise.

To obtain the response returned by the server,
B<SSL_get_tlsext_status_ocsp_resp> or B<SSL_get_tlsext_status_ocsp_multi_resp>
can be called. Both functions will work for either extension type.

B<SSL_get_tlsext_status_ocsp_resp> will update the value B<*resp> to point to
the OCSP response data and the return value will be the length of that data.

B<SSL_get_tlsext_status_ocsp_multi_resp> will update the value B<*resp> to point
to a list of OCSP responses and the return value will be the number of responses
in that list, also counting empty responses.

If the server has not provided any response data then B<*resp> will be NULL and
the return value from these funtions will be -1.

Typically a callback would obtain OCSP_RESPONSE objects from this data via a
call to the d2i_OCSP_RESPONSE() function.

=head2 Server

On the server side SSL_get_tlsext_status_type() can be used to determine whether
the client requested OCSP stapling. If the client requested it then this
function will return B<TLSEXT_STATUSTYPE_ocsp> or
B<TLSEXT_STATUSTYPE_ocsp_multi>, or -1 otherwise.

A server application must also call the SSL_CTX_set_tlsext_status_cb() function
if it wants to be able to provide clients with OCSP Certificate Status
responses. Typically the server callback would obtain the server certificates
that are being sent back to the client via calls to SSL_get_certificate() and
SSL_get0_chain_certs(); obtain the OCSP responses to be sent back; and then set
that response data by calling SSL_set_tlsext_status_ocsp_resp() or
SSL_set_tlsext_status_ocsp_multi_resp(). A pointer to the response data should
be provided in the B<resp> argument, and the length of that data should be in
the B<len> argument. XXX

B<SSL_OCSP_MULTI_RESP_set> must not be called again when the I<resp> was set to
an B<SSL> object. To replace an OCSP response with a freshly fetched one,
create a new B<SSL_OCSP_MULTI_RESP> object and free the old one.

=head1 RETURN VALUES

The callback when used on the client side should return a negative value on
error; 0 if the response is not acceptable (in which case the handshake will
fail) or a positive value if it is acceptable.

The callback when used on the server side should return with either
SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set should be
returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP response should not be
returned) or SSL_TLSEXT_ERR_ALERT_FATAL (meaning that a fatal error has
occurred).

SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(),
SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and
SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.

SSL_CTX_get_tlsext_status_type() returns the value previously set by
SSL_CTX_set_tlsext_status_type(), or -1 if not set.

SSL_get_tlsext_status_ocsp_resp() returns the length of the OCSP response data
or -1 if there is no OCSP response data.

SSL_get_tlsext_status_type() returns B<TLSEXT_STATUSTYPE_ocsp> on the client
side if SSL_set_tlsext_status_type() was previously called, or on the server
side if the client requested OCSP stapling. Otherwise -1 is returned.

=head1 HISTORY

SSL_get_tlsext_status_type(), SSL_CTX_get_tlsext_status_type() and
SSL_CTX_set_tlsext_status_type() were added in OpenSSL 1.1.0.

B<TLSEXT_STATUSTYPE_ocsp_multi>, SSL_get_tlsext_status_ocsp_multi_resp() and
SSL_set_tlsext_status_ocsp_multi_resp() were added in OpenSSL 1.XXX.XXX

=head1 COPYRIGHT

Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
